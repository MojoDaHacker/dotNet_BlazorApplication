@page "/"
@using System.Net.Http;
@using System.Net.Http.Json;
@using ChartJs.Blazor.PieChart;
@inject HttpClient Http;

<div>
    <input type="text" class="form-control" id="tickerInput" aria-describedby="tickerInput" placeholder="@placeholder">
    <button @onclick="getStockData" class="btn btn-primary">Search</button>
</div>
<div class="container">
    <div class="row">
        <div class="col">
            <div>
                <Chart Config="_config" @ref="_chart"></Chart>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <div class="p-3">
                @if (currentStockOverview != null)
                {
                    <p>Stock : @currentStockOverview["Symbol"], @currentStockOverview["Name"]</p>
                    <p>@currentStockOverview["Description"]</p>
                }
            </div>
        </div>
        <div class="col">
            <div class="p-3 overflow-auto">
                @if (currentStockOverview != null)
                {
                    int x = 0;
                    foreach (var kvp in currentStockOverview)
                    {
                        if (x > 5)
                        {
                            <p>@kvp.Key : @kvp.Value </p>
                        }
                        x++;
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private PieConfig _config;
    private Chart _chart;
    private Stock currentStockData;
    private Dictionary<string, string> currentStockOverview;
    string placeholder = "Search for a stock...";
    static string API_KEY = "AOXEK538A6LQR341";
    static string STOCK_QUERY_URL = $"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey={API_KEY}";
    static string STOCKOVERVIEW_QUERY_URL = $"https://www.alphavantage.co/query?function=OVERVIEW&symbol=IBM&apikey={API_KEY}";

    async Task getStockData()
    {
        currentStockData = await Http.GetFromJsonAsync<Stock>(STOCK_QUERY_URL);
        currentStockOverview = await Http.GetFromJsonAsync<Dictionary<string, string>>(STOCKOVERVIEW_QUERY_URL);
        @*currentStockData.getTickCount();*@

        Console.WriteLine(currentStockOverview["Symbol"]);
    }
    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Pie Chart"
                }
            }
        };

        foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        {
            _config.Data.Labels.Add(color);
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
        {
            BackgroundColor = new[]
            {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
        };

        _config.Data.Datasets.Add(dataset);
    }
}
